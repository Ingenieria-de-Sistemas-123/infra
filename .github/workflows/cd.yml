name: CD (infra)

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

concurrency:
  group: cd-infra-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_to_vm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          command_timeout: 20m
          debug: true
          script: |
            set -xeuo pipefail
            cd "${{ secrets.DEPLOY_WORKDIR }}"

            BRANCH="${{ github.ref_name }}"
            COMPOSE_FILE="docker-compose.dev.yml"
            [ "$BRANCH" = "main" ] && COMPOSE_FILE="docker-compose.yml"  # safe with set -e

            echo "[cd] branch=$BRANCH compose=$COMPOSE_FILE"

            echo "[cd] sync infra repo to $BRANCH"
            git fetch --all --prune
            git reset --hard "origin/$BRANCH"

            echo "[cd] using compose file: $COMPOSE_FILE"
            pwd; ls -la
            test -f "$COMPOSE_FILE" || { echo "::error file=$COMPOSE_FILE::compose file not found"; exit 1; }

            echo "[cd] versions"
            docker --version
            docker compose version

            echo "[cd] login to ghcr.io"
            docker logout ghcr.io >/dev/null 2>&1 || true
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER || github.actor }}" --password-stdin

            echo "[cd] validate compose"
            docker compose -f "$COMPOSE_FILE" config

            echo "[cd] pull & up"
            docker compose -f "$COMPOSE_FILE" pull
            docker compose -f "$COMPOSE_FILE" up -d --remove-orphans

            echo "[cd] wait for services"
            wait_up() {
              local name="$1" url="$2"
              echo "→ waiting $name at $url ..."
              for i in $(seq 1 40); do
                if curl -fsS "$url" | grep -q '"status":"UP"'; then
                  echo "✓ $name UP"; return 0
                fi
                sleep 2
              done
              echo "::error::$name did not become UP"; return 1
            }
            wait_up "permission-service" "http://localhost:8080/actuator/health"
            wait_up "snippet-service"    "http://localhost:8081/actuator/health"
            wait_up "language-service"   "http://localhost:8082/actuator/health"

            echo "[cd] state"
            docker compose -f "$COMPOSE_FILE" ps

            echo "[cd] prune old images"
            docker image prune -f
